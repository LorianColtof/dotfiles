#!/bin/bash
_SCRIPTDIR=$(cd $(dirname $0);echo $PWD)

alias ls='ls --color=auto'
alias ll='ls -alh'
alias grep='grep --color=auto'
alias gs='git status'
alias cduva='cd ~/Sync/UvA/'
alias cdssl='cd ~/Sync/SSL-Leiden/'
alias cdvia='cd ~/Sync/VIA/'
alias cdviaduct='cd ~/Sync/VIA/ICT/viaduct'
alias cdzfp='cd ~/Sync/ZFP/'
alias cddotfiles="cd ~/dotfiles"

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ......="cd ../../../.."

alias ccat='pygmentize -g -O linenos'

alias startmysql="sudo systemctl start mysqld"
alias startpostgres="sudo systemctl start postgresql"

alias sl="sl -e"
alias LS="sl -e"
alias copy="xsel -i -b"

alias clearl="clear;ls -l"
alias wine32="WINEPREFIX=~/.wine32 wine"

alias uvavpn="sudo openconnect --juniper -u 10769153 uvavpn.uva.nl"

pls() {
    hist=$(fc -ln -1)
    echo "Executing this command with sudo:"
    echo $hist
    zsh -c "sudo -E $hist"
}

alias getip='dig +short myip.opendns.com @resolver1.opendns.com'

alias sudo='sudo -E'

alias loadrc="src"

alias mountstack="sudo mount -t davfs https://loriancoltof.stackstorage.com/remote.php/webdav/ /mnt/stack"

alias ssh="TERM=xterm-256color ssh"

alias checkmixedindent="ag '( \t|\t )' *.(c|h)"
alias checktrailingwhitespace="ag ' $' *.(c|h)"

alias zathura="GDK_SCALE=1 GDK_DPI_SCALE=1 launch zathura"

ssltunnel() {
    systemd-ask-password "SSH password:" > /tmp/ssltunnel-pass
    systemctl --user restart ssltunnel.service
    sleep 3
    if systemctl --user status ssltunnel.service &> /dev/null
    then
        echo "Tunnel created successfully"
    else
        echo "Error creating tunnel. Invalid password?"
    fi
}

launch() {
    $@ &> /dev/null &
}

plug() {
    case $1 in
        update)
            cmd="PlugUpdate"
            ;;
        upgrade)
            cmd="PlugUpgrade"
            ;;
        install)
            cmd="PlugInstall"
            ;;
        *)
            echo "Je doet het niet goed"
            return
    esac

    vim -c $cmd

}

presentation() {
    pdfpc $@ &
    i3-msg workspace "pdfpc-presentation"
    i3-msg move workspaceto output left
    i3-msg workspace "pdfpc-presentation"
}

display() {
    case $1 in
        reset)
            xrandr --auto
            _fix_touchscreen
            ;;
        extend)
            args=(${@[@]:2})
            _extend $args
            ;;
        *)
            echo "Je doet het niet goed"
            ;;
    esac
}

_extend() {
    position="left"

    if ! ( [ "$#" -lt 1 ] ||  [[ $1 == "left" ]] || [[ $1 == "right" ]] ); then
        echo "position should be either 'left' or 'right'"
        return
    elif [ "$#" -ge 1 ]; then
        position=$1

    fi

    if ! xrandr -q | grep "HDMI1 connected" &> /dev/null; then
        echo "HDMI1 not connected" > /dev/stderr
        return
    fi

    res=($(xrandr -q | grep "HDMI1 connected" -A 1 | \
        tail -n 1 | cut -d' ' -f4 | sed 's/x/ /g'))
    monWidth=${res[1]}
    monHeight=${res[2]}

    laptop_res=($(xrandr -q | grep "eDP1 connected" -A 1 | \
        tail -n 1 | cut -d' ' -f4 | sed 's/x/ /g'))
    laptopWidth=${laptop_res[1]}
    laptopHeight=${laptop_res[2]}


    if [[ $position == "left" ]]; then
        offset="-$(echo "$monWidth * 2" | bc )x0"
    else
        offset="${laptopWidth}x0"
    fi

    xrandr --output eDP1 --pos 0x0 \
        --output HDMI1 --mode ${monWidth}x${monHeight} \
        --pos $offset \
        --scale 2x2

    _fix_touchscreen
}

_fix_touchscreen() {
    touchscreen_id=$(xinput --list | grep Touchscreen | \
        sed -n 's/.*id=\([0-9]\+\).*/\1/p')
    xinput --map-to-output $touchscreen_id eDP1
}

br() {
    ddcutil -d 1 setvcp 10 $1
    ddcutil -d 2 setvcp 10 $1
}

_print_gpu_status() {
    gpu_status=$(cat /proc/acpi/bbswitch | cut -d ' ' -f 2)
    echo "GPU status: $gpu_status"
}

if command -v gpu >/dev/null; then
    unalias gpu
fi

gpu() {
    case $1 in
        on)
            $_SCRIPTDIR/scripts/gpu/gpu-switch on
            ;;
        off)
            $_SCRIPTDIR/scripts/gpu/gpu-switch off
            ;;
    esac

    _print_gpu_status
}


BLD="\e[01m"
BLU="\e[01;34m"
RED="\e[01;31m"
NRM="\e[00m"
GRM="\e[01;32m"

VENVDIR=~/.venv


printinfo() {
    echo -e "${BLD}$1${NRM}"
}

printerror() {
    echo -e "${BLD}${RED}Error: ${NRM}${BLD}$1${NRM}"
}

confirm() {
    echo -ne "${BLD}$1${NRM}"

    default_yes=false

    if ! [[ -z "$2" ]]
    then
        default_yes=$2
    fi

    if $default_yes
    then
        question=REPLY"? [Y/n] "
    else
        question=REPLY"? [y/N] "
    fi

    read $question
    if [[ $REPLY =~ ^[Yy]$ ]] || ($default_yes && [[ $REPLY =~ ^$ ]])
    then
        return 1
    fi
    return 0
}


venv()
{
    args=${@:2}
    case $1 in
        c|create)
            _venvcreate $(echo $args)
            ;;
        a|activate)
            _venvactivate $(echo $args)
            ;;
        r|remove)
            _venvremove $(echo $args)
            ;;
        l|list)
            _venvlist $(echo $args)
            ;;
        *)
            echo -e "${BLD}Usage:${NRM} venv [create|activate|remove|list]"
    esac
}

_venvcreate()
{
    if [ ! -d $VENVDIR  ]
    then
        printinfo "Creating directory $VENVDIR"
        mkdir -p $VENVDIR
        if [ $? -ne 0 ]
        then
            printerror "Creating directory failed. aborting"
            return 1
        fi
    fi

    name='venv'
    virtualenv_args=$@
    if [ -n "$1" ]
    then
        last_arg=${@[$#]}
        if [[ ! $last_arg =~ -.* ]]
        then
            name=$last_arg
            virtualenv_args=${@:1:-1}
        fi
    fi

    printinfo "Creating new virtualenv with name ${BLU}$name${NRM}"

    location=$(pwd)
    fullname=$(echo $location | tr '/' '%')_$name
    venvpath=$VENVDIR/$fullname
    if [ -d $venvpath ]
    then
        printerror "A virtualenv with name ${BLU}$name${NRM}${BLD} in this directory already exists"
        return 1
    fi
    cd $VENVDIR

    virtualenv --prompt=\($name\) $fullname $(echo $virtualenv_args)
    if [ $? -ne 0 ]
    then
        printerror "Creating virtualenv failed. aborting"
        cd $location
        return 1
    fi

    printinfo "Creating activate script for zsh"
    sed 's/PS1/RPROMPT/g' $venvpath/bin/activate > $venvpath/bin/activate.zsh
    if [ $? -ne 0 ]
    then
        printerror "Creating activate script failed. aborting"
        cd $location
        return 1
    fi

    cd $location
    printinfo "Done"

    confirm "Activate virtualenv now?" true
    if [ $? -ne 0 ]
    then
        _venvactivate $name
    fi
}

_venvactivate()
{
    name='venv'
    if [ -n "$1" ]
    then
        if [[ $1 =~ -.* ]]
        then
            printerror "Invalid virtalenv name: ${BLU}$1"
            return 1
        fi
        name=$1
    fi

    fullname=$(pwd | tr '/' '%')_$name
    venvpath=$VENVDIR/$fullname
    if [ ! -d $venvpath ]
    then
        printerror "Virtualenv ${BLU}$name${NRM}${BLD} does not exist for path $(pwd)"
        return 1
    fi

    source $venvpath/bin/activate.zsh
}


_venvremove()
{
    name='venv'
    if [ -n "$1" ]
    then
        if [[ $1 =~ -.* ]]
        then
            printerror "Invalid virtalenv name: ${BLU}$1"
            return 1
        fi
        name=$1
    fi

    fullname=$(pwd | tr '/' '%')_$name
    venvpath=$VENVDIR/$fullname
    if [ ! -d $venvpath ]
    then
        printerror "Virtualenv ${BLU}$name${NRM}${BLD} does not exist for path $(pwd)"
        return 1
    fi

    confirm "Are you sure you want to remove virtualenv '$name' for path $(pwd)?"
    if [ $? -ne 0 ]
    then
        rm -r $venvpath
    fi
}

_venvlist()
{

    case $1 in
        -a|--all)
            current_path=""
            for v in $(ls $VENVDIR | grep "^%")
            do
                v=$(echo $v | tr '%' '/' | sort)
                name=${v##*_}
                v_path=${v%_*}/
                if [ "$current_path" != "$v_path" ]
                then
                    if [ "$current_path" != "" ]
                    then
                        echo -ne "\n"
                    fi
                    current_path=$v_path
                    printinfo "$current_path:"
                fi
                echo "    ${BLD}${BLU}$name${NRM}"
            done
            ;;
        *)
            prefix=$(pwd | tr '/' '%')_
            venvs=$(ls $VENVDIR | grep "^$prefix" | sed -e "s/^$prefix//g")
            if [ ${#venvs[@]} -eq 0 ]
            then
                printinfo "No virtualenvs for path $(pwd)"
            else
                printinfo "Virtualenvs for path $(pwd):\n"
                for v in $(echo $venvs)
                do
                    echo "    ${BLD}${BLU}$v${NRM}"
                done
            fi
            ;;
    esac

}
